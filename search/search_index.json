{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"vault-secrets-operator Jsonnet library","text":"<p>This library is generated with <code>k8s</code>.</p> <ul> <li>0.1.0</li> <li>0.2.0</li> <li>0.3.0</li> </ul>"},{"location":"0.1.0/","title":"vault-secrets-operator","text":"<pre><code>local vault-secrets-operator = import \"github.com/jsonnet-libs/vault-secrets-operator-libsonnet/0.1.0/main.libsonnet\"\n</code></pre> <ul> <li>secrets</li> </ul>"},{"location":"0.1.0/secrets/","title":"secrets","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.1.0/secrets/v1beta1/","title":"secrets.v1beta1","text":"<ul> <li>hcpAuth</li> <li>hcpVaultSecretsApp</li> <li>vaultAuth</li> <li>vaultConnection</li> <li>vaultDynamicSecret</li> <li>vaultPKISecret</li> <li>vaultStaticSecret</li> </ul>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/","title":"secrets.v1beta1.hcpAuth","text":"<p>\"HCPAuth is the Schema for the hcpauths API\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowedNamespaces(allowedNamespaces)</code></li> <li><code>fn withAllowedNamespacesMixin(allowedNamespaces)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withOrganizationID(organizationID)</code></li> <li><code>fn withProjectID(projectID)</code></li> <li><code>obj spec.servicePrincipal</code><ul> <li><code>fn withSecretRef(secretRef)</code></li> </ul> </li> </ul>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fields","title":"Fields","text":""},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HCPAuth</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#obj-spec","title":"obj spec","text":"<p>\"HCPAuthSpec defines the desired state of HCPAuth\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-specwithallowednamespaces","title":"fn spec.withAllowedNamespaces","text":"<pre><code>withAllowedNamespaces(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which HCPAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the HCPAuthMethod's namespace, this is the default behavior.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-specwithallowednamespacesmixin","title":"fn spec.withAllowedNamespacesMixin","text":"<pre><code>withAllowedNamespacesMixin(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which HCPAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the HCPAuthMethod's namespace, this is the default behavior.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-specwithmethod","title":"fn spec.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method to use when authenticating to Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-specwithorganizationid","title":"fn spec.withOrganizationID","text":"<pre><code>withOrganizationID(organizationID)\n</code></pre> <p>\"OrganizationID of the HCP organization.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-specwithprojectid","title":"fn spec.withProjectID","text":"<pre><code>withProjectID(projectID)\n</code></pre> <p>\"ProjectID of the HCP project.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#obj-specserviceprincipal","title":"obj spec.servicePrincipal","text":"<p>\"ServicePrincipal provides the necessary configuration for authenticating to HCP using a service principal. For security reasons, only project-level service principals should ever be used.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpAuth/#fn-specserviceprincipalwithsecretref","title":"fn spec.servicePrincipal.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI/HCP) namespace which provides the HCP ServicePrincipal clientID, and clientSecret. The secret data must have the following structure { \\\"clientID\\\": \\\"clientID\\\", \\\"clientSecret\\\": \\\"clientSecret\\\", }\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/","title":"secrets.v1beta1.hcpVaultSecretsApp","text":"<p>\"HCPVaultSecretsApp is the Schema for the hcpvaultsecretsapps API\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAppName(appName)</code></li> <li><code>fn withHcpAuthRef(hcpAuthRef)</code></li> <li><code>fn withRefreshAfter(refreshAfter)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fields","title":"Fields","text":""},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HCPVaultSecretsApp</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-spec","title":"obj spec","text":"<p>\"HCPVaultSecretsAppSpec defines the desired state of HCPVaultSecretsApp\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithappname","title":"fn spec.withAppName","text":"<pre><code>withAppName(appName)\n</code></pre> <p>\"AppName of the Vault Secrets Application that is to be synced.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithhcpauthref","title":"fn spec.withHcpAuthRef","text":"<pre><code>withHcpAuthRef(hcpAuthRef)\n</code></pre> <p>\"HCPAuthRef to the HCPAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to the namespace of the HCPAuth CR. If no value is specified for HCPAuthRef the Operator will default to the <code>default</code> HCPAuth, configured in the operator's namespace.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrefreshafter","title":"fn spec.withRefreshAfter","text":"<pre><code>withRefreshAfter(refreshAfter)\n</code></pre> <p>\"RefreshAfter a period of time, in duration notation e.g. 30s, 1m, 24h\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the HCP Vault Application secrets to Kubernetes.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.1.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/","title":"secrets.v1beta1.vaultAuth","text":"<p>\"VaultAuth is the Schema for the vaultauths API\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowedNamespaces(allowedNamespaces)</code></li> <li><code>fn withAllowedNamespacesMixin(allowedNamespaces)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParams(params)</code></li> <li><code>fn withParamsMixin(params)</code></li> <li><code>fn withVaultConnectionRef(vaultConnectionRef)</code></li> <li><code>obj spec.appRole</code><ul> <li><code>fn withRoleId(roleId)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> </ul> </li> <li><code>obj spec.aws</code><ul> <li><code>fn withHeaderValue(headerValue)</code></li> <li><code>fn withIamEndpoint(iamEndpoint)</code></li> <li><code>fn withIrsaServiceAccount(irsaServiceAccount)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> <li><code>fn withSessionName(sessionName)</code></li> <li><code>fn withStsEndpoint(stsEndpoint)</code></li> </ul> </li> <li><code>obj spec.gcp</code><ul> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withProjectID(projectID)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withWorkloadIdentityServiceAccount(workloadIdentityServiceAccount)</code></li> </ul> </li> <li><code>obj spec.jwt</code><ul> <li><code>fn withAudiences(audiences)</code></li> <li><code>fn withAudiencesMixin(audiences)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withTokenExpirationSeconds(tokenExpirationSeconds)</code></li> </ul> </li> <li><code>obj spec.kubernetes</code><ul> <li><code>fn withAudiences(audiences)</code></li> <li><code>fn withAudiencesMixin(audiences)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withTokenExpirationSeconds(tokenExpirationSeconds)</code></li> </ul> </li> <li><code>obj spec.storageEncryption</code><ul> <li><code>fn withKeyName(keyName)</code></li> <li><code>fn withMount(mount)</code></li> </ul> </li> </ul>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fields","title":"Fields","text":""},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultAuth</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#obj-spec","title":"obj spec","text":"<p>\"VaultAuthSpec defines the desired state of VaultAuth\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithallowednamespaces","title":"fn spec.withAllowedNamespaces","text":"<pre><code>withAllowedNamespaces(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which VaultAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the VaultAuthMethod's namespace, this is the default behavior.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithallowednamespacesmixin","title":"fn spec.withAllowedNamespacesMixin","text":"<pre><code>withAllowedNamespacesMixin(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which VaultAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the VaultAuthMethod's namespace, this is the default behavior.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithheaders","title":"fn spec.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithheadersmixin","title":"fn spec.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithmethod","title":"fn spec.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method to use when authenticating to Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount to use when authenticating to auth method.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to auth to in Vault\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithparams","title":"fn spec.withParams","text":"<pre><code>withParams(params)\n</code></pre> <p>\"Params to use when authenticating to Vault\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithparamsmixin","title":"fn spec.withParamsMixin","text":"<pre><code>withParamsMixin(params)\n</code></pre> <p>\"Params to use when authenticating to Vault\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specwithvaultconnectionref","title":"fn spec.withVaultConnectionRef","text":"<pre><code>withVaultConnectionRef(vaultConnectionRef)\n</code></pre> <p>\"VaultConnectionRef to the VaultConnection resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultConnectionRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultConnection CR. If no value is specified for VaultConnectionRef the Operator will default to the <code>default</code> VaultConnection, configured in the operator's namespace.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#obj-specapprole","title":"obj spec.appRole","text":"<p>\"AppRole specific auth configuration, requires that the Method be set to <code>appRole</code>.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specapprolewithroleid","title":"fn spec.appRole.withRoleId","text":"<pre><code>withRoleId(roleId)\n</code></pre> <p>\"RoleID of the AppRole Role to use for authenticating to Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specapprolewithsecretref","title":"fn spec.appRole.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI) namespace which provides the AppRole Role's SecretID. The secret must have a key named <code>id</code> which holds the AppRole Role's secretID.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#obj-specaws","title":"obj spec.aws","text":"<p>\"AWS specific auth configuration, requires that Method be set to <code>aws</code>.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specawswithheadervalue","title":"fn spec.aws.withHeaderValue","text":"<pre><code>withHeaderValue(headerValue)\n</code></pre> <p>\"The Vault header value to include in the STS signing request\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specawswithiamendpoint","title":"fn spec.aws.withIamEndpoint","text":"<pre><code>withIamEndpoint(iamEndpoint)\n</code></pre> <p>\"The IAM endpoint to use; if not set will use the default\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specawswithirsaserviceaccount","title":"fn spec.aws.withIrsaServiceAccount","text":"<pre><code>withIrsaServiceAccount(irsaServiceAccount)\n</code></pre> <p>\"IRSAServiceAccount name to use with IAM Roles for Service Accounts (IRSA), and should be annotated with \\\"eks.amazonaws.com/role-arn\\\". This ServiceAccount will be checked for other EKS annotations: eks.amazonaws.com/audience and eks.amazonaws.com/token-expiration\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specawswithregion","title":"fn spec.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre> <p>\"AWS Region to use for signing the authentication request\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specawswithrole","title":"fn spec.aws.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Vault role to use for authenticating\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specawswithsecretref","title":"fn spec.aws.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes Secret in the consumer's (VDS/VSS/PKI) namespace which holds credentials for AWS. Expected keys include <code>access_key_id</code>, <code>secret_access_key</code>, <code>session_token</code>\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specawswithsessionname","title":"fn spec.aws.withSessionName","text":"<pre><code>withSessionName(sessionName)\n</code></pre> <p>\"The role session name to use when creating a webidentity provider\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specawswithstsendpoint","title":"fn spec.aws.withStsEndpoint","text":"<pre><code>withStsEndpoint(stsEndpoint)\n</code></pre> <p>\"The STS endpoint to use; if not set will use the default\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#obj-specgcp","title":"obj spec.gcp","text":"<p>\"GCP specific auth configuration, requires that Method be set to <code>gcp</code>.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithclustername","title":"fn spec.gcp.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"GKE cluster name. Defaults to the cluster-name returned from the operator pod's local metadata server.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithprojectid","title":"fn spec.gcp.withProjectID","text":"<pre><code>withProjectID(projectID)\n</code></pre> <p>\"GCP project ID. Defaults to the project-id returned from the operator pod's local metadata server.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithregion","title":"fn spec.gcp.withRegion","text":"<pre><code>withRegion(region)\n</code></pre> <p>\"GCP Region of the GKE cluster's identity provider. Defaults to the region returned from the operator pod's local metadata server.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithrole","title":"fn spec.gcp.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Vault role to use for authenticating\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithworkloadidentityserviceaccount","title":"fn spec.gcp.withWorkloadIdentityServiceAccount","text":"<pre><code>withWorkloadIdentityServiceAccount(workloadIdentityServiceAccount)\n</code></pre> <p>\"WorkloadIdentityServiceAccount is the name of a Kubernetes service account (in the same Kubernetes namespace as the Vault*Secret referencing this resource) which has been configured for workload identity in GKE. Should be annotated with \\\"iam.gke.io/gcp-service-account\\\".\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#obj-specjwt","title":"obj spec.jwt","text":"<p>\"JWT specific auth configuration, requires that the Method be set to <code>jwt</code>.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithaudiences","title":"fn spec.jwt.withAudiences","text":"<pre><code>withAudiences(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithaudiencesmixin","title":"fn spec.jwt.withAudiencesMixin","text":"<pre><code>withAudiencesMixin(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithrole","title":"fn spec.jwt.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role to use for authenticating to Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithsecretref","title":"fn spec.jwt.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI) namespace which provides the JWT token to authenticate to Vault's JWT authentication backend. The secret must have a key named <code>jwt</code> which holds the JWT token.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithserviceaccount","title":"fn spec.jwt.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre> <p>\"ServiceAccount to use when creating a ServiceAccount token to authenticate to Vault's JWT authentication backend.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithtokenexpirationseconds","title":"fn spec.jwt.withTokenExpirationSeconds","text":"<pre><code>withTokenExpirationSeconds(tokenExpirationSeconds)\n</code></pre> <p>\"TokenExpirationSeconds to set the ServiceAccount token.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#obj-speckubernetes","title":"obj spec.kubernetes","text":"<p>\"Kubernetes specific auth configuration, requires that the Method be set to <code>kubernetes</code>.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithaudiences","title":"fn spec.kubernetes.withAudiences","text":"<pre><code>withAudiences(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithaudiencesmixin","title":"fn spec.kubernetes.withAudiencesMixin","text":"<pre><code>withAudiencesMixin(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithrole","title":"fn spec.kubernetes.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role to use for authenticating to Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithserviceaccount","title":"fn spec.kubernetes.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre> <p>\"ServiceAccount to use when authenticating to Vault's authentication backend. This must reside in the consuming secret's (VDS/VSS/PKI) namespace.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithtokenexpirationseconds","title":"fn spec.kubernetes.withTokenExpirationSeconds","text":"<pre><code>withTokenExpirationSeconds(tokenExpirationSeconds)\n</code></pre> <p>\"TokenExpirationSeconds to set the ServiceAccount token.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#obj-specstorageencryption","title":"obj spec.storageEncryption","text":"<p>\"StorageEncryption provides the necessary configuration to encrypt the client storage cache. This should only be configured when client cache persistence with encryption is enabled. This is done by passing setting the manager's commandline argument --client-cache-persistence-model=direct-encrypted. Typically, there should only ever be one VaultAuth configured with StorageEncryption in the Cluster, and it should have the label: cacheStorageEncryption=true\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specstorageencryptionwithkeyname","title":"fn spec.storageEncryption.withKeyName","text":"<pre><code>withKeyName(keyName)\n</code></pre> <p>\"KeyName to use for encrypt/decrypt operations via Vault Transit.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultAuth/#fn-specstorageencryptionwithmount","title":"fn spec.storageEncryption.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount path of the Transit engine in Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/","title":"secrets.v1beta1.vaultConnection","text":"<p>\"VaultConnection is the Schema for the vaultconnections API\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAddress(address)</code></li> <li><code>fn withCaCertSecretRef(caCertSecretRef)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withSkipTLSVerify(skipTLSVerify)</code></li> <li><code>fn withTlsServerName(tlsServerName)</code></li> </ul>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fields","title":"Fields","text":""},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultConnection</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#obj-spec","title":"obj spec","text":"<p>\"VaultConnectionSpec defines the desired state of VaultConnection\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-specwithaddress","title":"fn spec.withAddress","text":"<pre><code>withAddress(address)\n</code></pre> <p>\"Address of the Vault server\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-specwithcacertsecretref","title":"fn spec.withCaCertSecretRef","text":"<pre><code>withCaCertSecretRef(caCertSecretRef)\n</code></pre> <p>\"CACertSecretRef is the name of a Kubernetes secret containing the trusted PEM encoded CA certificate chain as <code>ca.crt</code>.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-specwithheaders","title":"fn spec.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-specwithheadersmixin","title":"fn spec.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-specwithskiptlsverify","title":"fn spec.withSkipTLSVerify","text":"<pre><code>withSkipTLSVerify(skipTLSVerify)\n</code></pre> <p>\"SkipTLSVerify for TLS connections.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultConnection/#fn-specwithtlsservername","title":"fn spec.withTlsServerName","text":"<pre><code>withTlsServerName(tlsServerName)\n</code></pre> <p>\"TLSServerName to use as the SNI host for TLS connections.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/","title":"secrets.v1beta1.vaultDynamicSecret","text":"<p>\"VaultDynamicSecret is the Schema for the vaultdynamicsecrets API\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowStaticCreds(allowStaticCreds)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParams(params)</code></li> <li><code>fn withParamsMixin(params)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withRenewalPercent(renewalPercent)</code></li> <li><code>fn withRequestHTTPMethod(requestHTTPMethod)</code></li> <li><code>fn withRevoke(revoke)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fields","title":"Fields","text":""},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultDynamicSecret</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#obj-spec","title":"obj spec","text":"<p>\"VaultDynamicSecretSpec defines the desired state of VaultDynamicSecret\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithallowstaticcreds","title":"fn spec.withAllowStaticCreds","text":"<pre><code>withAllowStaticCreds(allowStaticCreds)\n</code></pre> <p>\"AllowStaticCreds should be set when syncing credentials that are periodically rotated by the Vault server, rather than created upon request. These secrets are sometimes referred to as \\\"static roles\\\", or \\\"static credentials\\\", with a request path that contains \\\"static-creds\\\".\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount path of the secret's engine in Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace where the secrets engine is mounted in Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithparams","title":"fn spec.withParams","text":"<pre><code>withParams(params)\n</code></pre> <p>\"Params that can be passed when requesting credentials/secrets. When Params is set the configured RequestHTTPMethod will be ignored. See RequestHTTPMethod for more details. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'params' should/can be set to.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithparamsmixin","title":"fn spec.withParamsMixin","text":"<pre><code>withParamsMixin(params)\n</code></pre> <p>\"Params that can be passed when requesting credentials/secrets. When Params is set the configured RequestHTTPMethod will be ignored. See RequestHTTPMethod for more details. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'params' should/can be set to.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithpath","title":"fn spec.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path in Vault to get the credentials for, and is relative to Mount. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'path' should be set to.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrenewalpercent","title":"fn spec.withRenewalPercent","text":"<pre><code>withRenewalPercent(renewalPercent)\n</code></pre> <p>\"RenewalPercent is the percent out of 100 of the lease duration when the lease is renewed. Defaults to 67 percent plus jitter.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrequesthttpmethod","title":"fn spec.withRequestHTTPMethod","text":"<pre><code>withRequestHTTPMethod(requestHTTPMethod)\n</code></pre> <p>\"RequestHTTPMethod to use when syncing Secrets from Vault. Setting a value here is not typically required. If left unset the Operator will make requests using the GET method. In the case where Params are specified the Operator will use the PUT method. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what method to use. Of note, the Vault client treats PUT and POST as being equivalent. The underlying Vault client implementation will always use the PUT method.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrevoke","title":"fn spec.withRevoke","text":"<pre><code>withRevoke(revoke)\n</code></pre> <p>\"Revoke the existing lease on VDS resource deletion.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.1.0/secrets/v1beta1/vaultDynamicSecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/","title":"secrets.v1beta1.vaultPKISecret","text":"<p>\"VaultPKISecret is the Schema for the vaultpkisecrets API\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAltNames(altNames)</code></li> <li><code>fn withAltNamesMixin(altNames)</code></li> <li><code>fn withClear(clear)</code></li> <li><code>fn withCommonName(commonName)</code></li> <li><code>fn withExcludeCNFromSans(excludeCNFromSans)</code></li> <li><code>fn withExpiryOffset(expiryOffset)</code></li> <li><code>fn withFormat(format)</code></li> <li><code>fn withIpSans(ipSans)</code></li> <li><code>fn withIpSansMixin(ipSans)</code></li> <li><code>fn withIssuerRef(issuerRef)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNotAfter(notAfter)</code></li> <li><code>fn withOtherSans(otherSans)</code></li> <li><code>fn withOtherSansMixin(otherSans)</code></li> <li><code>fn withPrivateKeyFormat(privateKeyFormat)</code></li> <li><code>fn withRevoke(revoke)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withTtl(ttl)</code></li> <li><code>fn withUriSans(uriSans)</code></li> <li><code>fn withUriSansMixin(uriSans)</code></li> <li><code>fn withUserIDs(userIDs)</code></li> <li><code>fn withUserIDsMixin(userIDs)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fields","title":"Fields","text":""},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultPKISecret</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#obj-spec","title":"obj spec","text":"<p>\"VaultPKISecretSpec defines the desired state of VaultPKISecret\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithaltnames","title":"fn spec.withAltNames","text":"<pre><code>withAltNames(altNames)\n</code></pre> <p>\"AltNames to include in the request May contain both DNS names and email addresses.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithaltnamesmixin","title":"fn spec.withAltNamesMixin","text":"<pre><code>withAltNamesMixin(altNames)\n</code></pre> <p>\"AltNames to include in the request May contain both DNS names and email addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithclear","title":"fn spec.withClear","text":"<pre><code>withClear(clear)\n</code></pre> <p>\"Clear the Kubernetes secret when the resource is deleted.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithcommonname","title":"fn spec.withCommonName","text":"<pre><code>withCommonName(commonName)\n</code></pre> <p>\"CommonName to include in the request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithexcludecnfromsans","title":"fn spec.withExcludeCNFromSans","text":"<pre><code>withExcludeCNFromSans(excludeCNFromSans)\n</code></pre> <p>\"ExcludeCNFromSans from DNS or Email Subject Alternate Names. Default: false\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithexpiryoffset","title":"fn spec.withExpiryOffset","text":"<pre><code>withExpiryOffset(expiryOffset)\n</code></pre> <p>\"ExpiryOffset to use for computing when the certificate should be renewed. The rotation time will be difference between the expiration and the offset. Should be in duration notation e.g. 30s, 120s, etc.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithformat","title":"fn spec.withFormat","text":"<pre><code>withFormat(format)\n</code></pre> <p>\"Format for the certificate. Choices: \\\"pem\\\", \\\"der\\\", \\\"pem_bundle\\\". If \\\"pem_bundle\\\", any private key and issuing cert will be appended to the certificate pem. If \\\"der\\\", the value will be base64 encoded. Default: pem\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithipsans","title":"fn spec.withIpSans","text":"<pre><code>withIpSans(ipSans)\n</code></pre> <p>\"IPSans to include in the request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithipsansmixin","title":"fn spec.withIpSansMixin","text":"<pre><code>withIpSansMixin(ipSans)\n</code></pre> <p>\"IPSans to include in the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithissuerref","title":"fn spec.withIssuerRef","text":"<pre><code>withIssuerRef(issuerRef)\n</code></pre> <p>\"IssuerRef reference to an existing PKI issuer, either by Vault-generated identifier, the literal string default to refer to the currently configured default issuer, or the name assigned to an issuer. This parameter is part of the request URL.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount for the secret in Vault\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to get the secret from in Vault\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithnotafter","title":"fn spec.withNotAfter","text":"<pre><code>withNotAfter(notAfter)\n</code></pre> <p>\"NotAfter field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithothersans","title":"fn spec.withOtherSans","text":"<pre><code>withOtherSans(otherSans)\n</code></pre> <p>\"Requested other SANs, in an array with the format oid;type:value for each entry.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithothersansmixin","title":"fn spec.withOtherSansMixin","text":"<pre><code>withOtherSansMixin(otherSans)\n</code></pre> <p>\"Requested other SANs, in an array with the format oid;type:value for each entry.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithprivatekeyformat","title":"fn spec.withPrivateKeyFormat","text":"<pre><code>withPrivateKeyFormat(privateKeyFormat)\n</code></pre> <p>\"PrivateKeyFormat, generally the default will be controlled by the Format parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \\\"pkcs8\\\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Default: der\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrevoke","title":"fn spec.withRevoke","text":"<pre><code>withRevoke(revoke)\n</code></pre> <p>\"Revoke the certificate when the resource is deleted.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrole","title":"fn spec.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role in Vault to use when issuing TLS certificates.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithttl","title":"fn spec.withTtl","text":"<pre><code>withTtl(ttl)\n</code></pre> <p>\"TTL for the certificate; sets the expiration date. If not specified the Vault role's default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount's max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA. Should be in duration notation e.g. 120s, 2h, etc.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithurisans","title":"fn spec.withUriSans","text":"<pre><code>withUriSans(uriSans)\n</code></pre> <p>\"The requested URI SANs.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithurisansmixin","title":"fn spec.withUriSansMixin","text":"<pre><code>withUriSansMixin(uriSans)\n</code></pre> <p>\"The requested URI SANs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithuserids","title":"fn spec.withUserIDs","text":"<pre><code>withUserIDs(userIDs)\n</code></pre> <p>\"User ID (OID 0.9.2342.19200300.100.1.1) Subject values to be placed on the signed certificate.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithuseridsmixin","title":"fn spec.withUserIDsMixin","text":"<pre><code>withUserIDsMixin(userIDs)\n</code></pre> <p>\"User ID (OID 0.9.2342.19200300.100.1.1) Subject values to be placed on the signed certificate.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes. If the type is set to \\\"kubernetes.io/tls\\\", \\\"tls.key\\\" will be set to the \\\"private_key\\\" response from Vault, and \\\"tls.crt\\\" will be set to \\\"certificate\\\" + \\\"ca_chain\\\" from the Vault response (\\\"issuing_ca\\\" is used when \\\"ca_chain\\\" is empty). The \\\"remove_roots_from_chain=true\\\" option is used with Vault to exclude the root CA from the Vault response.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.1.0/secrets/v1beta1/vaultPKISecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/","title":"secrets.v1beta1.vaultStaticSecret","text":"<p>\"VaultStaticSecret is the Schema for the vaultstaticsecrets API\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withHmacSecretData(hmacSecretData)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withRefreshAfter(refreshAfter)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fields","title":"Fields","text":""},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultStaticSecret</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#obj-spec","title":"obj spec","text":"<p>\"VaultStaticSecretSpec defines the desired state of VaultStaticSecret\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithhmacsecretdata","title":"fn spec.withHmacSecretData","text":"<pre><code>withHmacSecretData(hmacSecretData)\n</code></pre> <p>\"HMACSecretData determines whether the Operator computes the HMAC of the Secret's data. The MAC value will be stored in the resource's Status.SecretMac field, and will be used for drift detection and during incoming Vault secret comparison. Enabling this feature is recommended to ensure that Secret's data stays consistent with Vault.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount for the secret in Vault\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to get the secret from in Vault\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithpath","title":"fn spec.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path of the secret in Vault, corresponds to the <code>path</code> parameter for, kv-v1: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v1#read-secret kv-v2: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#read-secret-version\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrefreshafter","title":"fn spec.withRefreshAfter","text":"<pre><code>withRefreshAfter(refreshAfter)\n</code></pre> <p>\"RefreshAfter a period of time, in duration notation e.g. 30s, 1m, 24h\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithtype","title":"fn spec.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the Vault static secret\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithversion","title":"fn spec.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version of the secret to fetch. Only valid for type kv-v2. Corresponds to version query parameter: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#version\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.1.0/secrets/v1beta1/vaultStaticSecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.2.0/","title":"vault-secrets-operator","text":"<pre><code>local vault-secrets-operator = import \"github.com/jsonnet-libs/vault-secrets-operator-libsonnet/0.2.0/main.libsonnet\"\n</code></pre> <ul> <li>secrets</li> </ul>"},{"location":"0.2.0/secrets/","title":"secrets","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.2.0/secrets/v1beta1/","title":"secrets.v1beta1","text":"<ul> <li>hcpAuth</li> <li>hcpVaultSecretsApp</li> <li>vaultAuth</li> <li>vaultConnection</li> <li>vaultDynamicSecret</li> <li>vaultPKISecret</li> <li>vaultStaticSecret</li> </ul>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/","title":"secrets.v1beta1.hcpAuth","text":"<p>\"HCPAuth is the Schema for the hcpauths API\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowedNamespaces(allowedNamespaces)</code></li> <li><code>fn withAllowedNamespacesMixin(allowedNamespaces)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withOrganizationID(organizationID)</code></li> <li><code>fn withProjectID(projectID)</code></li> <li><code>obj spec.servicePrincipal</code><ul> <li><code>fn withSecretRef(secretRef)</code></li> </ul> </li> </ul>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fields","title":"Fields","text":""},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HCPAuth</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#obj-spec","title":"obj spec","text":"<p>\"HCPAuthSpec defines the desired state of HCPAuth\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-specwithallowednamespaces","title":"fn spec.withAllowedNamespaces","text":"<pre><code>withAllowedNamespaces(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which HCPAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the HCPAuthMethod's namespace, this is the default behavior.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-specwithallowednamespacesmixin","title":"fn spec.withAllowedNamespacesMixin","text":"<pre><code>withAllowedNamespacesMixin(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which HCPAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the HCPAuthMethod's namespace, this is the default behavior.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-specwithmethod","title":"fn spec.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method to use when authenticating to Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-specwithorganizationid","title":"fn spec.withOrganizationID","text":"<pre><code>withOrganizationID(organizationID)\n</code></pre> <p>\"OrganizationID of the HCP organization.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-specwithprojectid","title":"fn spec.withProjectID","text":"<pre><code>withProjectID(projectID)\n</code></pre> <p>\"ProjectID of the HCP project.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#obj-specserviceprincipal","title":"obj spec.servicePrincipal","text":"<p>\"ServicePrincipal provides the necessary configuration for authenticating to HCP using a service principal. For security reasons, only project-level service principals should ever be used.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpAuth/#fn-specserviceprincipalwithsecretref","title":"fn spec.servicePrincipal.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI/HCP) namespace which provides the HCP ServicePrincipal clientID, and clientSecret. The secret data must have the following structure { \\\"clientID\\\": \\\"clientID\\\", \\\"clientSecret\\\": \\\"clientSecret\\\", }\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/","title":"secrets.v1beta1.hcpVaultSecretsApp","text":"<p>\"HCPVaultSecretsApp is the Schema for the hcpvaultsecretsapps API\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAppName(appName)</code></li> <li><code>fn withHcpAuthRef(hcpAuthRef)</code></li> <li><code>fn withRefreshAfter(refreshAfter)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fields","title":"Fields","text":""},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HCPVaultSecretsApp</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-spec","title":"obj spec","text":"<p>\"HCPVaultSecretsAppSpec defines the desired state of HCPVaultSecretsApp\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithappname","title":"fn spec.withAppName","text":"<pre><code>withAppName(appName)\n</code></pre> <p>\"AppName of the Vault Secrets Application that is to be synced.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithhcpauthref","title":"fn spec.withHcpAuthRef","text":"<pre><code>withHcpAuthRef(hcpAuthRef)\n</code></pre> <p>\"HCPAuthRef to the HCPAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to the namespace of the HCPAuth CR. If no value is specified for HCPAuthRef the Operator will default to the <code>default</code> HCPAuth, configured in the operator's namespace.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrefreshafter","title":"fn spec.withRefreshAfter","text":"<pre><code>withRefreshAfter(refreshAfter)\n</code></pre> <p>\"RefreshAfter a period of time, in duration notation e.g. 30s, 1m, 24h\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the HCP Vault Application secrets to Kubernetes.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.2.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/","title":"secrets.v1beta1.vaultAuth","text":"<p>\"VaultAuth is the Schema for the vaultauths API\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowedNamespaces(allowedNamespaces)</code></li> <li><code>fn withAllowedNamespacesMixin(allowedNamespaces)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParams(params)</code></li> <li><code>fn withParamsMixin(params)</code></li> <li><code>fn withVaultConnectionRef(vaultConnectionRef)</code></li> <li><code>obj spec.appRole</code><ul> <li><code>fn withRoleId(roleId)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> </ul> </li> <li><code>obj spec.aws</code><ul> <li><code>fn withHeaderValue(headerValue)</code></li> <li><code>fn withIamEndpoint(iamEndpoint)</code></li> <li><code>fn withIrsaServiceAccount(irsaServiceAccount)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> <li><code>fn withSessionName(sessionName)</code></li> <li><code>fn withStsEndpoint(stsEndpoint)</code></li> </ul> </li> <li><code>obj spec.gcp</code><ul> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withProjectID(projectID)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withWorkloadIdentityServiceAccount(workloadIdentityServiceAccount)</code></li> </ul> </li> <li><code>obj spec.jwt</code><ul> <li><code>fn withAudiences(audiences)</code></li> <li><code>fn withAudiencesMixin(audiences)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withTokenExpirationSeconds(tokenExpirationSeconds)</code></li> </ul> </li> <li><code>obj spec.kubernetes</code><ul> <li><code>fn withAudiences(audiences)</code></li> <li><code>fn withAudiencesMixin(audiences)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withTokenExpirationSeconds(tokenExpirationSeconds)</code></li> </ul> </li> <li><code>obj spec.storageEncryption</code><ul> <li><code>fn withKeyName(keyName)</code></li> <li><code>fn withMount(mount)</code></li> </ul> </li> </ul>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fields","title":"Fields","text":""},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultAuth</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#obj-spec","title":"obj spec","text":"<p>\"VaultAuthSpec defines the desired state of VaultAuth\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithallowednamespaces","title":"fn spec.withAllowedNamespaces","text":"<pre><code>withAllowedNamespaces(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which VaultAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the VaultAuthMethod's namespace, this is the default behavior.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithallowednamespacesmixin","title":"fn spec.withAllowedNamespacesMixin","text":"<pre><code>withAllowedNamespacesMixin(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which VaultAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the VaultAuthMethod's namespace, this is the default behavior.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithheaders","title":"fn spec.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithheadersmixin","title":"fn spec.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithmethod","title":"fn spec.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method to use when authenticating to Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount to use when authenticating to auth method.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to auth to in Vault\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithparams","title":"fn spec.withParams","text":"<pre><code>withParams(params)\n</code></pre> <p>\"Params to use when authenticating to Vault\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithparamsmixin","title":"fn spec.withParamsMixin","text":"<pre><code>withParamsMixin(params)\n</code></pre> <p>\"Params to use when authenticating to Vault\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specwithvaultconnectionref","title":"fn spec.withVaultConnectionRef","text":"<pre><code>withVaultConnectionRef(vaultConnectionRef)\n</code></pre> <p>\"VaultConnectionRef to the VaultConnection resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultConnectionRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultConnection CR. If no value is specified for VaultConnectionRef the Operator will default to the <code>default</code> VaultConnection, configured in the operator's namespace.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#obj-specapprole","title":"obj spec.appRole","text":"<p>\"AppRole specific auth configuration, requires that the Method be set to <code>appRole</code>.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specapprolewithroleid","title":"fn spec.appRole.withRoleId","text":"<pre><code>withRoleId(roleId)\n</code></pre> <p>\"RoleID of the AppRole Role to use for authenticating to Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specapprolewithsecretref","title":"fn spec.appRole.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI) namespace which provides the AppRole Role's SecretID. The secret must have a key named <code>id</code> which holds the AppRole Role's secretID.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#obj-specaws","title":"obj spec.aws","text":"<p>\"AWS specific auth configuration, requires that Method be set to <code>aws</code>.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specawswithheadervalue","title":"fn spec.aws.withHeaderValue","text":"<pre><code>withHeaderValue(headerValue)\n</code></pre> <p>\"The Vault header value to include in the STS signing request\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specawswithiamendpoint","title":"fn spec.aws.withIamEndpoint","text":"<pre><code>withIamEndpoint(iamEndpoint)\n</code></pre> <p>\"The IAM endpoint to use; if not set will use the default\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specawswithirsaserviceaccount","title":"fn spec.aws.withIrsaServiceAccount","text":"<pre><code>withIrsaServiceAccount(irsaServiceAccount)\n</code></pre> <p>\"IRSAServiceAccount name to use with IAM Roles for Service Accounts (IRSA), and should be annotated with \\\"eks.amazonaws.com/role-arn\\\". This ServiceAccount will be checked for other EKS annotations: eks.amazonaws.com/audience and eks.amazonaws.com/token-expiration\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specawswithregion","title":"fn spec.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre> <p>\"AWS Region to use for signing the authentication request\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specawswithrole","title":"fn spec.aws.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Vault role to use for authenticating\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specawswithsecretref","title":"fn spec.aws.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes Secret in the consumer's (VDS/VSS/PKI) namespace which holds credentials for AWS. Expected keys include <code>access_key_id</code>, <code>secret_access_key</code>, <code>session_token</code>\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specawswithsessionname","title":"fn spec.aws.withSessionName","text":"<pre><code>withSessionName(sessionName)\n</code></pre> <p>\"The role session name to use when creating a webidentity provider\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specawswithstsendpoint","title":"fn spec.aws.withStsEndpoint","text":"<pre><code>withStsEndpoint(stsEndpoint)\n</code></pre> <p>\"The STS endpoint to use; if not set will use the default\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#obj-specgcp","title":"obj spec.gcp","text":"<p>\"GCP specific auth configuration, requires that Method be set to <code>gcp</code>.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithclustername","title":"fn spec.gcp.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"GKE cluster name. Defaults to the cluster-name returned from the operator pod's local metadata server.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithprojectid","title":"fn spec.gcp.withProjectID","text":"<pre><code>withProjectID(projectID)\n</code></pre> <p>\"GCP project ID. Defaults to the project-id returned from the operator pod's local metadata server.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithregion","title":"fn spec.gcp.withRegion","text":"<pre><code>withRegion(region)\n</code></pre> <p>\"GCP Region of the GKE cluster's identity provider. Defaults to the region returned from the operator pod's local metadata server.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithrole","title":"fn spec.gcp.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Vault role to use for authenticating\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithworkloadidentityserviceaccount","title":"fn spec.gcp.withWorkloadIdentityServiceAccount","text":"<pre><code>withWorkloadIdentityServiceAccount(workloadIdentityServiceAccount)\n</code></pre> <p>\"WorkloadIdentityServiceAccount is the name of a Kubernetes service account (in the same Kubernetes namespace as the Vault*Secret referencing this resource) which has been configured for workload identity in GKE. Should be annotated with \\\"iam.gke.io/gcp-service-account\\\".\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#obj-specjwt","title":"obj spec.jwt","text":"<p>\"JWT specific auth configuration, requires that the Method be set to <code>jwt</code>.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithaudiences","title":"fn spec.jwt.withAudiences","text":"<pre><code>withAudiences(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithaudiencesmixin","title":"fn spec.jwt.withAudiencesMixin","text":"<pre><code>withAudiencesMixin(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithrole","title":"fn spec.jwt.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role to use for authenticating to Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithsecretref","title":"fn spec.jwt.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI) namespace which provides the JWT token to authenticate to Vault's JWT authentication backend. The secret must have a key named <code>jwt</code> which holds the JWT token.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithserviceaccount","title":"fn spec.jwt.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre> <p>\"ServiceAccount to use when creating a ServiceAccount token to authenticate to Vault's JWT authentication backend.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithtokenexpirationseconds","title":"fn spec.jwt.withTokenExpirationSeconds","text":"<pre><code>withTokenExpirationSeconds(tokenExpirationSeconds)\n</code></pre> <p>\"TokenExpirationSeconds to set the ServiceAccount token.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#obj-speckubernetes","title":"obj spec.kubernetes","text":"<p>\"Kubernetes specific auth configuration, requires that the Method be set to <code>kubernetes</code>.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithaudiences","title":"fn spec.kubernetes.withAudiences","text":"<pre><code>withAudiences(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithaudiencesmixin","title":"fn spec.kubernetes.withAudiencesMixin","text":"<pre><code>withAudiencesMixin(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithrole","title":"fn spec.kubernetes.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role to use for authenticating to Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithserviceaccount","title":"fn spec.kubernetes.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre> <p>\"ServiceAccount to use when authenticating to Vault's authentication backend. This must reside in the consuming secret's (VDS/VSS/PKI) namespace.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithtokenexpirationseconds","title":"fn spec.kubernetes.withTokenExpirationSeconds","text":"<pre><code>withTokenExpirationSeconds(tokenExpirationSeconds)\n</code></pre> <p>\"TokenExpirationSeconds to set the ServiceAccount token.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#obj-specstorageencryption","title":"obj spec.storageEncryption","text":"<p>\"StorageEncryption provides the necessary configuration to encrypt the client storage cache. This should only be configured when client cache persistence with encryption is enabled. This is done by passing setting the manager's commandline argument --client-cache-persistence-model=direct-encrypted. Typically, there should only ever be one VaultAuth configured with StorageEncryption in the Cluster, and it should have the label: cacheStorageEncryption=true\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specstorageencryptionwithkeyname","title":"fn spec.storageEncryption.withKeyName","text":"<pre><code>withKeyName(keyName)\n</code></pre> <p>\"KeyName to use for encrypt/decrypt operations via Vault Transit.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultAuth/#fn-specstorageencryptionwithmount","title":"fn spec.storageEncryption.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount path of the Transit engine in Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/","title":"secrets.v1beta1.vaultConnection","text":"<p>\"VaultConnection is the Schema for the vaultconnections API\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAddress(address)</code></li> <li><code>fn withCaCertSecretRef(caCertSecretRef)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withSkipTLSVerify(skipTLSVerify)</code></li> <li><code>fn withTlsServerName(tlsServerName)</code></li> </ul>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fields","title":"Fields","text":""},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultConnection</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#obj-spec","title":"obj spec","text":"<p>\"VaultConnectionSpec defines the desired state of VaultConnection\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-specwithaddress","title":"fn spec.withAddress","text":"<pre><code>withAddress(address)\n</code></pre> <p>\"Address of the Vault server\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-specwithcacertsecretref","title":"fn spec.withCaCertSecretRef","text":"<pre><code>withCaCertSecretRef(caCertSecretRef)\n</code></pre> <p>\"CACertSecretRef is the name of a Kubernetes secret containing the trusted PEM encoded CA certificate chain as <code>ca.crt</code>.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-specwithheaders","title":"fn spec.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-specwithheadersmixin","title":"fn spec.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-specwithskiptlsverify","title":"fn spec.withSkipTLSVerify","text":"<pre><code>withSkipTLSVerify(skipTLSVerify)\n</code></pre> <p>\"SkipTLSVerify for TLS connections.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultConnection/#fn-specwithtlsservername","title":"fn spec.withTlsServerName","text":"<pre><code>withTlsServerName(tlsServerName)\n</code></pre> <p>\"TLSServerName to use as the SNI host for TLS connections.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/","title":"secrets.v1beta1.vaultDynamicSecret","text":"<p>\"VaultDynamicSecret is the Schema for the vaultdynamicsecrets API\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowStaticCreds(allowStaticCreds)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParams(params)</code></li> <li><code>fn withParamsMixin(params)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withRenewalPercent(renewalPercent)</code></li> <li><code>fn withRequestHTTPMethod(requestHTTPMethod)</code></li> <li><code>fn withRevoke(revoke)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fields","title":"Fields","text":""},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultDynamicSecret</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#obj-spec","title":"obj spec","text":"<p>\"VaultDynamicSecretSpec defines the desired state of VaultDynamicSecret\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithallowstaticcreds","title":"fn spec.withAllowStaticCreds","text":"<pre><code>withAllowStaticCreds(allowStaticCreds)\n</code></pre> <p>\"AllowStaticCreds should be set when syncing credentials that are periodically rotated by the Vault server, rather than created upon request. These secrets are sometimes referred to as \\\"static roles\\\", or \\\"static credentials\\\", with a request path that contains \\\"static-creds\\\".\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount path of the secret's engine in Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace where the secrets engine is mounted in Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithparams","title":"fn spec.withParams","text":"<pre><code>withParams(params)\n</code></pre> <p>\"Params that can be passed when requesting credentials/secrets. When Params is set the configured RequestHTTPMethod will be ignored. See RequestHTTPMethod for more details. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'params' should/can be set to.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithparamsmixin","title":"fn spec.withParamsMixin","text":"<pre><code>withParamsMixin(params)\n</code></pre> <p>\"Params that can be passed when requesting credentials/secrets. When Params is set the configured RequestHTTPMethod will be ignored. See RequestHTTPMethod for more details. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'params' should/can be set to.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithpath","title":"fn spec.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path in Vault to get the credentials for, and is relative to Mount. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'path' should be set to.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrenewalpercent","title":"fn spec.withRenewalPercent","text":"<pre><code>withRenewalPercent(renewalPercent)\n</code></pre> <p>\"RenewalPercent is the percent out of 100 of the lease duration when the lease is renewed. Defaults to 67 percent plus jitter.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrequesthttpmethod","title":"fn spec.withRequestHTTPMethod","text":"<pre><code>withRequestHTTPMethod(requestHTTPMethod)\n</code></pre> <p>\"RequestHTTPMethod to use when syncing Secrets from Vault. Setting a value here is not typically required. If left unset the Operator will make requests using the GET method. In the case where Params are specified the Operator will use the PUT method. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what method to use. Of note, the Vault client treats PUT and POST as being equivalent. The underlying Vault client implementation will always use the PUT method.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrevoke","title":"fn spec.withRevoke","text":"<pre><code>withRevoke(revoke)\n</code></pre> <p>\"Revoke the existing lease on VDS resource deletion.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.2.0/secrets/v1beta1/vaultDynamicSecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/","title":"secrets.v1beta1.vaultPKISecret","text":"<p>\"VaultPKISecret is the Schema for the vaultpkisecrets API\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAltNames(altNames)</code></li> <li><code>fn withAltNamesMixin(altNames)</code></li> <li><code>fn withClear(clear)</code></li> <li><code>fn withCommonName(commonName)</code></li> <li><code>fn withExcludeCNFromSans(excludeCNFromSans)</code></li> <li><code>fn withExpiryOffset(expiryOffset)</code></li> <li><code>fn withFormat(format)</code></li> <li><code>fn withIpSans(ipSans)</code></li> <li><code>fn withIpSansMixin(ipSans)</code></li> <li><code>fn withIssuerRef(issuerRef)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNotAfter(notAfter)</code></li> <li><code>fn withOtherSans(otherSans)</code></li> <li><code>fn withOtherSansMixin(otherSans)</code></li> <li><code>fn withPrivateKeyFormat(privateKeyFormat)</code></li> <li><code>fn withRevoke(revoke)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withTtl(ttl)</code></li> <li><code>fn withUriSans(uriSans)</code></li> <li><code>fn withUriSansMixin(uriSans)</code></li> <li><code>fn withUserIDs(userIDs)</code></li> <li><code>fn withUserIDsMixin(userIDs)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fields","title":"Fields","text":""},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultPKISecret</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#obj-spec","title":"obj spec","text":"<p>\"VaultPKISecretSpec defines the desired state of VaultPKISecret\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithaltnames","title":"fn spec.withAltNames","text":"<pre><code>withAltNames(altNames)\n</code></pre> <p>\"AltNames to include in the request May contain both DNS names and email addresses.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithaltnamesmixin","title":"fn spec.withAltNamesMixin","text":"<pre><code>withAltNamesMixin(altNames)\n</code></pre> <p>\"AltNames to include in the request May contain both DNS names and email addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithclear","title":"fn spec.withClear","text":"<pre><code>withClear(clear)\n</code></pre> <p>\"Clear the Kubernetes secret when the resource is deleted.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithcommonname","title":"fn spec.withCommonName","text":"<pre><code>withCommonName(commonName)\n</code></pre> <p>\"CommonName to include in the request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithexcludecnfromsans","title":"fn spec.withExcludeCNFromSans","text":"<pre><code>withExcludeCNFromSans(excludeCNFromSans)\n</code></pre> <p>\"ExcludeCNFromSans from DNS or Email Subject Alternate Names. Default: false\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithexpiryoffset","title":"fn spec.withExpiryOffset","text":"<pre><code>withExpiryOffset(expiryOffset)\n</code></pre> <p>\"ExpiryOffset to use for computing when the certificate should be renewed. The rotation time will be difference between the expiration and the offset. Should be in duration notation e.g. 30s, 120s, etc.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithformat","title":"fn spec.withFormat","text":"<pre><code>withFormat(format)\n</code></pre> <p>\"Format for the certificate. Choices: \\\"pem\\\", \\\"der\\\", \\\"pem_bundle\\\". If \\\"pem_bundle\\\", any private key and issuing cert will be appended to the certificate pem. If \\\"der\\\", the value will be base64 encoded. Default: pem\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithipsans","title":"fn spec.withIpSans","text":"<pre><code>withIpSans(ipSans)\n</code></pre> <p>\"IPSans to include in the request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithipsansmixin","title":"fn spec.withIpSansMixin","text":"<pre><code>withIpSansMixin(ipSans)\n</code></pre> <p>\"IPSans to include in the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithissuerref","title":"fn spec.withIssuerRef","text":"<pre><code>withIssuerRef(issuerRef)\n</code></pre> <p>\"IssuerRef reference to an existing PKI issuer, either by Vault-generated identifier, the literal string default to refer to the currently configured default issuer, or the name assigned to an issuer. This parameter is part of the request URL.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount for the secret in Vault\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to get the secret from in Vault\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithnotafter","title":"fn spec.withNotAfter","text":"<pre><code>withNotAfter(notAfter)\n</code></pre> <p>\"NotAfter field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithothersans","title":"fn spec.withOtherSans","text":"<pre><code>withOtherSans(otherSans)\n</code></pre> <p>\"Requested other SANs, in an array with the format oid;type:value for each entry.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithothersansmixin","title":"fn spec.withOtherSansMixin","text":"<pre><code>withOtherSansMixin(otherSans)\n</code></pre> <p>\"Requested other SANs, in an array with the format oid;type:value for each entry.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithprivatekeyformat","title":"fn spec.withPrivateKeyFormat","text":"<pre><code>withPrivateKeyFormat(privateKeyFormat)\n</code></pre> <p>\"PrivateKeyFormat, generally the default will be controlled by the Format parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \\\"pkcs8\\\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Default: der\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrevoke","title":"fn spec.withRevoke","text":"<pre><code>withRevoke(revoke)\n</code></pre> <p>\"Revoke the certificate when the resource is deleted.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrole","title":"fn spec.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role in Vault to use when issuing TLS certificates.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithttl","title":"fn spec.withTtl","text":"<pre><code>withTtl(ttl)\n</code></pre> <p>\"TTL for the certificate; sets the expiration date. If not specified the Vault role's default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount's max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA. Should be in duration notation e.g. 120s, 2h, etc.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithurisans","title":"fn spec.withUriSans","text":"<pre><code>withUriSans(uriSans)\n</code></pre> <p>\"The requested URI SANs.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithurisansmixin","title":"fn spec.withUriSansMixin","text":"<pre><code>withUriSansMixin(uriSans)\n</code></pre> <p>\"The requested URI SANs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithuserids","title":"fn spec.withUserIDs","text":"<pre><code>withUserIDs(userIDs)\n</code></pre> <p>\"User ID (OID 0.9.2342.19200300.100.1.1) Subject values to be placed on the signed certificate.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithuseridsmixin","title":"fn spec.withUserIDsMixin","text":"<pre><code>withUserIDsMixin(userIDs)\n</code></pre> <p>\"User ID (OID 0.9.2342.19200300.100.1.1) Subject values to be placed on the signed certificate.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes. If the type is set to \\\"kubernetes.io/tls\\\", \\\"tls.key\\\" will be set to the \\\"private_key\\\" response from Vault, and \\\"tls.crt\\\" will be set to \\\"certificate\\\" + \\\"ca_chain\\\" from the Vault response (\\\"issuing_ca\\\" is used when \\\"ca_chain\\\" is empty). The \\\"remove_roots_from_chain=true\\\" option is used with Vault to exclude the root CA from the Vault response.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.2.0/secrets/v1beta1/vaultPKISecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/","title":"secrets.v1beta1.vaultStaticSecret","text":"<p>\"VaultStaticSecret is the Schema for the vaultstaticsecrets API\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withHmacSecretData(hmacSecretData)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withRefreshAfter(refreshAfter)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fields","title":"Fields","text":""},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultStaticSecret</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#obj-spec","title":"obj spec","text":"<p>\"VaultStaticSecretSpec defines the desired state of VaultStaticSecret\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithhmacsecretdata","title":"fn spec.withHmacSecretData","text":"<pre><code>withHmacSecretData(hmacSecretData)\n</code></pre> <p>\"HMACSecretData determines whether the Operator computes the HMAC of the Secret's data. The MAC value will be stored in the resource's Status.SecretMac field, and will be used for drift detection and during incoming Vault secret comparison. Enabling this feature is recommended to ensure that Secret's data stays consistent with Vault.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount for the secret in Vault\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to get the secret from in Vault\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithpath","title":"fn spec.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path of the secret in Vault, corresponds to the <code>path</code> parameter for, kv-v1: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v1#read-secret kv-v2: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#read-secret-version\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrefreshafter","title":"fn spec.withRefreshAfter","text":"<pre><code>withRefreshAfter(refreshAfter)\n</code></pre> <p>\"RefreshAfter a period of time, in duration notation e.g. 30s, 1m, 24h\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithtype","title":"fn spec.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the Vault static secret\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithversion","title":"fn spec.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version of the secret to fetch. Only valid for type kv-v2. Corresponds to version query parameter: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#version\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.2.0/secrets/v1beta1/vaultStaticSecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.3.0/","title":"vault-secrets-operator","text":"<pre><code>local vault-secrets-operator = import \"github.com/jsonnet-libs/vault-secrets-operator-libsonnet/0.3.0/main.libsonnet\"\n</code></pre> <ul> <li>secrets</li> </ul>"},{"location":"0.3.0/secrets/","title":"secrets","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"0.3.0/secrets/v1beta1/","title":"secrets.v1beta1","text":"<ul> <li>hcpAuth</li> <li>hcpVaultSecretsApp</li> <li>vaultAuth</li> <li>vaultConnection</li> <li>vaultDynamicSecret</li> <li>vaultPKISecret</li> <li>vaultStaticSecret</li> </ul>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/","title":"secrets.v1beta1.hcpAuth","text":"<p>\"HCPAuth is the Schema for the hcpauths API\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowedNamespaces(allowedNamespaces)</code></li> <li><code>fn withAllowedNamespacesMixin(allowedNamespaces)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withOrganizationID(organizationID)</code></li> <li><code>fn withProjectID(projectID)</code></li> <li><code>obj spec.servicePrincipal</code><ul> <li><code>fn withSecretRef(secretRef)</code></li> </ul> </li> </ul>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fields","title":"Fields","text":""},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HCPAuth</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#obj-spec","title":"obj spec","text":"<p>\"HCPAuthSpec defines the desired state of HCPAuth\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-specwithallowednamespaces","title":"fn spec.withAllowedNamespaces","text":"<pre><code>withAllowedNamespaces(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which HCPAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the HCPAuthMethod's namespace, this is the default behavior.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-specwithallowednamespacesmixin","title":"fn spec.withAllowedNamespacesMixin","text":"<pre><code>withAllowedNamespacesMixin(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which HCPAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the HCPAuthMethod's namespace, this is the default behavior.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-specwithmethod","title":"fn spec.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method to use when authenticating to Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-specwithorganizationid","title":"fn spec.withOrganizationID","text":"<pre><code>withOrganizationID(organizationID)\n</code></pre> <p>\"OrganizationID of the HCP organization.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-specwithprojectid","title":"fn spec.withProjectID","text":"<pre><code>withProjectID(projectID)\n</code></pre> <p>\"ProjectID of the HCP project.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#obj-specserviceprincipal","title":"obj spec.servicePrincipal","text":"<p>\"ServicePrincipal provides the necessary configuration for authenticating to HCP using a service principal. For security reasons, only project-level service principals should ever be used.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpAuth/#fn-specserviceprincipalwithsecretref","title":"fn spec.servicePrincipal.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI/HCP) namespace which provides the HCP ServicePrincipal clientID, and clientSecret. The secret data must have the following structure { \\\"clientID\\\": \\\"clientID\\\", \\\"clientSecret\\\": \\\"clientSecret\\\", }\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/","title":"secrets.v1beta1.hcpVaultSecretsApp","text":"<p>\"HCPVaultSecretsApp is the Schema for the hcpvaultsecretsapps API\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAppName(appName)</code></li> <li><code>fn withHcpAuthRef(hcpAuthRef)</code></li> <li><code>fn withRefreshAfter(refreshAfter)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fields","title":"Fields","text":""},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of HCPVaultSecretsApp</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-spec","title":"obj spec","text":"<p>\"HCPVaultSecretsAppSpec defines the desired state of HCPVaultSecretsApp\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithappname","title":"fn spec.withAppName","text":"<pre><code>withAppName(appName)\n</code></pre> <p>\"AppName of the Vault Secrets Application that is to be synced.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithhcpauthref","title":"fn spec.withHcpAuthRef","text":"<pre><code>withHcpAuthRef(hcpAuthRef)\n</code></pre> <p>\"HCPAuthRef to the HCPAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to the namespace of the HCPAuth CR. If no value is specified for HCPAuthRef the Operator will default to the <code>default</code> HCPAuth, configured in the operator's namespace.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrefreshafter","title":"fn spec.withRefreshAfter","text":"<pre><code>withRefreshAfter(refreshAfter)\n</code></pre> <p>\"RefreshAfter a period of time, in duration notation e.g. 30s, 1m, 24h\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the HCP Vault Application secrets to Kubernetes.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the HCP Vault Secrets App does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.3.0/secrets/v1beta1/hcpVaultSecretsApp/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/","title":"secrets.v1beta1.vaultAuth","text":"<p>\"VaultAuth is the Schema for the vaultauths API\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowedNamespaces(allowedNamespaces)</code></li> <li><code>fn withAllowedNamespacesMixin(allowedNamespaces)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParams(params)</code></li> <li><code>fn withParamsMixin(params)</code></li> <li><code>fn withVaultConnectionRef(vaultConnectionRef)</code></li> <li><code>obj spec.appRole</code><ul> <li><code>fn withRoleId(roleId)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> </ul> </li> <li><code>obj spec.aws</code><ul> <li><code>fn withHeaderValue(headerValue)</code></li> <li><code>fn withIamEndpoint(iamEndpoint)</code></li> <li><code>fn withIrsaServiceAccount(irsaServiceAccount)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> <li><code>fn withSessionName(sessionName)</code></li> <li><code>fn withStsEndpoint(stsEndpoint)</code></li> </ul> </li> <li><code>obj spec.gcp</code><ul> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withProjectID(projectID)</code></li> <li><code>fn withRegion(region)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withWorkloadIdentityServiceAccount(workloadIdentityServiceAccount)</code></li> </ul> </li> <li><code>obj spec.jwt</code><ul> <li><code>fn withAudiences(audiences)</code></li> <li><code>fn withAudiencesMixin(audiences)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withSecretRef(secretRef)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withTokenExpirationSeconds(tokenExpirationSeconds)</code></li> </ul> </li> <li><code>obj spec.kubernetes</code><ul> <li><code>fn withAudiences(audiences)</code></li> <li><code>fn withAudiencesMixin(audiences)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withTokenExpirationSeconds(tokenExpirationSeconds)</code></li> </ul> </li> <li><code>obj spec.storageEncryption</code><ul> <li><code>fn withKeyName(keyName)</code></li> <li><code>fn withMount(mount)</code></li> </ul> </li> </ul>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fields","title":"Fields","text":""},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultAuth</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#obj-spec","title":"obj spec","text":"<p>\"VaultAuthSpec defines the desired state of VaultAuth\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithallowednamespaces","title":"fn spec.withAllowedNamespaces","text":"<pre><code>withAllowedNamespaces(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which VaultAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the VaultAuthMethod's namespace, this is the default behavior.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithallowednamespacesmixin","title":"fn spec.withAllowedNamespacesMixin","text":"<pre><code>withAllowedNamespacesMixin(allowedNamespaces)\n</code></pre> <p>\"AllowedNamespaces Kubernetes Namespaces which are allow-listed for use with this AuthMethod. This field allows administrators to customize which Kubernetes namespaces are authorized to use with this AuthMethod. While Vault will still enforce its own rules, this has the added configurability of restricting which VaultAuthMethods can be used by which namespaces. Accepted values: []{\\\"*\\\"} - wildcard, all namespaces. []{\\\"a\\\", \\\"b\\\"} - list of namespaces. unset - disallow all namespaces except the Operator's the VaultAuthMethod's namespace, this is the default behavior.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithheaders","title":"fn spec.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithheadersmixin","title":"fn spec.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithmethod","title":"fn spec.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method to use when authenticating to Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount to use when authenticating to auth method.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to auth to in Vault\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithparams","title":"fn spec.withParams","text":"<pre><code>withParams(params)\n</code></pre> <p>\"Params to use when authenticating to Vault\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithparamsmixin","title":"fn spec.withParamsMixin","text":"<pre><code>withParamsMixin(params)\n</code></pre> <p>\"Params to use when authenticating to Vault\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specwithvaultconnectionref","title":"fn spec.withVaultConnectionRef","text":"<pre><code>withVaultConnectionRef(vaultConnectionRef)\n</code></pre> <p>\"VaultConnectionRef to the VaultConnection resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultConnectionRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultConnection CR. If no value is specified for VaultConnectionRef the Operator will default to the <code>default</code> VaultConnection, configured in the operator's namespace.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#obj-specapprole","title":"obj spec.appRole","text":"<p>\"AppRole specific auth configuration, requires that the Method be set to <code>appRole</code>.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specapprolewithroleid","title":"fn spec.appRole.withRoleId","text":"<pre><code>withRoleId(roleId)\n</code></pre> <p>\"RoleID of the AppRole Role to use for authenticating to Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specapprolewithsecretref","title":"fn spec.appRole.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI) namespace which provides the AppRole Role's SecretID. The secret must have a key named <code>id</code> which holds the AppRole Role's secretID.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#obj-specaws","title":"obj spec.aws","text":"<p>\"AWS specific auth configuration, requires that Method be set to <code>aws</code>.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specawswithheadervalue","title":"fn spec.aws.withHeaderValue","text":"<pre><code>withHeaderValue(headerValue)\n</code></pre> <p>\"The Vault header value to include in the STS signing request\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specawswithiamendpoint","title":"fn spec.aws.withIamEndpoint","text":"<pre><code>withIamEndpoint(iamEndpoint)\n</code></pre> <p>\"The IAM endpoint to use; if not set will use the default\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specawswithirsaserviceaccount","title":"fn spec.aws.withIrsaServiceAccount","text":"<pre><code>withIrsaServiceAccount(irsaServiceAccount)\n</code></pre> <p>\"IRSAServiceAccount name to use with IAM Roles for Service Accounts (IRSA), and should be annotated with \\\"eks.amazonaws.com/role-arn\\\". This ServiceAccount will be checked for other EKS annotations: eks.amazonaws.com/audience and eks.amazonaws.com/token-expiration\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specawswithregion","title":"fn spec.aws.withRegion","text":"<pre><code>withRegion(region)\n</code></pre> <p>\"AWS Region to use for signing the authentication request\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specawswithrole","title":"fn spec.aws.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Vault role to use for authenticating\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specawswithsecretref","title":"fn spec.aws.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes Secret in the consumer's (VDS/VSS/PKI) namespace which holds credentials for AWS. Expected keys include <code>access_key_id</code>, <code>secret_access_key</code>, <code>session_token</code>\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specawswithsessionname","title":"fn spec.aws.withSessionName","text":"<pre><code>withSessionName(sessionName)\n</code></pre> <p>\"The role session name to use when creating a webidentity provider\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specawswithstsendpoint","title":"fn spec.aws.withStsEndpoint","text":"<pre><code>withStsEndpoint(stsEndpoint)\n</code></pre> <p>\"The STS endpoint to use; if not set will use the default\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#obj-specgcp","title":"obj spec.gcp","text":"<p>\"GCP specific auth configuration, requires that Method be set to <code>gcp</code>.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithclustername","title":"fn spec.gcp.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"GKE cluster name. Defaults to the cluster-name returned from the operator pod's local metadata server.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithprojectid","title":"fn spec.gcp.withProjectID","text":"<pre><code>withProjectID(projectID)\n</code></pre> <p>\"GCP project ID. Defaults to the project-id returned from the operator pod's local metadata server.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithregion","title":"fn spec.gcp.withRegion","text":"<pre><code>withRegion(region)\n</code></pre> <p>\"GCP Region of the GKE cluster's identity provider. Defaults to the region returned from the operator pod's local metadata server.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithrole","title":"fn spec.gcp.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Vault role to use for authenticating\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specgcpwithworkloadidentityserviceaccount","title":"fn spec.gcp.withWorkloadIdentityServiceAccount","text":"<pre><code>withWorkloadIdentityServiceAccount(workloadIdentityServiceAccount)\n</code></pre> <p>\"WorkloadIdentityServiceAccount is the name of a Kubernetes service account (in the same Kubernetes namespace as the Vault*Secret referencing this resource) which has been configured for workload identity in GKE. Should be annotated with \\\"iam.gke.io/gcp-service-account\\\".\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#obj-specjwt","title":"obj spec.jwt","text":"<p>\"JWT specific auth configuration, requires that the Method be set to <code>jwt</code>.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithaudiences","title":"fn spec.jwt.withAudiences","text":"<pre><code>withAudiences(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithaudiencesmixin","title":"fn spec.jwt.withAudiencesMixin","text":"<pre><code>withAudiencesMixin(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithrole","title":"fn spec.jwt.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role to use for authenticating to Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithsecretref","title":"fn spec.jwt.withSecretRef","text":"<pre><code>withSecretRef(secretRef)\n</code></pre> <p>\"SecretRef is the name of a Kubernetes secret in the consumer's (VDS/VSS/PKI) namespace which provides the JWT token to authenticate to Vault's JWT authentication backend. The secret must have a key named <code>jwt</code> which holds the JWT token.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithserviceaccount","title":"fn spec.jwt.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre> <p>\"ServiceAccount to use when creating a ServiceAccount token to authenticate to Vault's JWT authentication backend.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specjwtwithtokenexpirationseconds","title":"fn spec.jwt.withTokenExpirationSeconds","text":"<pre><code>withTokenExpirationSeconds(tokenExpirationSeconds)\n</code></pre> <p>\"TokenExpirationSeconds to set the ServiceAccount token.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#obj-speckubernetes","title":"obj spec.kubernetes","text":"<p>\"Kubernetes specific auth configuration, requires that the Method be set to <code>kubernetes</code>.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithaudiences","title":"fn spec.kubernetes.withAudiences","text":"<pre><code>withAudiences(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithaudiencesmixin","title":"fn spec.kubernetes.withAudiencesMixin","text":"<pre><code>withAudiencesMixin(audiences)\n</code></pre> <p>\"TokenAudiences to include in the ServiceAccount token.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithrole","title":"fn spec.kubernetes.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role to use for authenticating to Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithserviceaccount","title":"fn spec.kubernetes.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre> <p>\"ServiceAccount to use when authenticating to Vault's authentication backend. This must reside in the consuming secret's (VDS/VSS/PKI) namespace.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-speckuberneteswithtokenexpirationseconds","title":"fn spec.kubernetes.withTokenExpirationSeconds","text":"<pre><code>withTokenExpirationSeconds(tokenExpirationSeconds)\n</code></pre> <p>\"TokenExpirationSeconds to set the ServiceAccount token.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#obj-specstorageencryption","title":"obj spec.storageEncryption","text":"<p>\"StorageEncryption provides the necessary configuration to encrypt the client storage cache. This should only be configured when client cache persistence with encryption is enabled. This is done by passing setting the manager's commandline argument --client-cache-persistence-model=direct-encrypted. Typically, there should only ever be one VaultAuth configured with StorageEncryption in the Cluster, and it should have the label: cacheStorageEncryption=true\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specstorageencryptionwithkeyname","title":"fn spec.storageEncryption.withKeyName","text":"<pre><code>withKeyName(keyName)\n</code></pre> <p>\"KeyName to use for encrypt/decrypt operations via Vault Transit.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultAuth/#fn-specstorageencryptionwithmount","title":"fn spec.storageEncryption.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount path of the Transit engine in Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/","title":"secrets.v1beta1.vaultConnection","text":"<p>\"VaultConnection is the Schema for the vaultconnections API\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAddress(address)</code></li> <li><code>fn withCaCertSecretRef(caCertSecretRef)</code></li> <li><code>fn withHeaders(headers)</code></li> <li><code>fn withHeadersMixin(headers)</code></li> <li><code>fn withSkipTLSVerify(skipTLSVerify)</code></li> <li><code>fn withTlsServerName(tlsServerName)</code></li> </ul>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fields","title":"Fields","text":""},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultConnection</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#obj-spec","title":"obj spec","text":"<p>\"VaultConnectionSpec defines the desired state of VaultConnection\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-specwithaddress","title":"fn spec.withAddress","text":"<pre><code>withAddress(address)\n</code></pre> <p>\"Address of the Vault server\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-specwithcacertsecretref","title":"fn spec.withCaCertSecretRef","text":"<pre><code>withCaCertSecretRef(caCertSecretRef)\n</code></pre> <p>\"CACertSecretRef is the name of a Kubernetes secret containing the trusted PEM encoded CA certificate chain as <code>ca.crt</code>.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-specwithheaders","title":"fn spec.withHeaders","text":"<pre><code>withHeaders(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-specwithheadersmixin","title":"fn spec.withHeadersMixin","text":"<pre><code>withHeadersMixin(headers)\n</code></pre> <p>\"Headers to be included in all Vault requests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-specwithskiptlsverify","title":"fn spec.withSkipTLSVerify","text":"<pre><code>withSkipTLSVerify(skipTLSVerify)\n</code></pre> <p>\"SkipTLSVerify for TLS connections.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultConnection/#fn-specwithtlsservername","title":"fn spec.withTlsServerName","text":"<pre><code>withTlsServerName(tlsServerName)\n</code></pre> <p>\"TLSServerName to use as the SNI host for TLS connections.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/","title":"secrets.v1beta1.vaultDynamicSecret","text":"<p>\"VaultDynamicSecret is the Schema for the vaultdynamicsecrets API\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAllowStaticCreds(allowStaticCreds)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParams(params)</code></li> <li><code>fn withParamsMixin(params)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withRenewalPercent(renewalPercent)</code></li> <li><code>fn withRequestHTTPMethod(requestHTTPMethod)</code></li> <li><code>fn withRevoke(revoke)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fields","title":"Fields","text":""},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultDynamicSecret</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#obj-spec","title":"obj spec","text":"<p>\"VaultDynamicSecretSpec defines the desired state of VaultDynamicSecret\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithallowstaticcreds","title":"fn spec.withAllowStaticCreds","text":"<pre><code>withAllowStaticCreds(allowStaticCreds)\n</code></pre> <p>\"AllowStaticCreds should be set when syncing credentials that are periodically rotated by the Vault server, rather than created upon request. These secrets are sometimes referred to as \\\"static roles\\\", or \\\"static credentials\\\", with a request path that contains \\\"static-creds\\\".\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount path of the secret's engine in Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace where the secrets engine is mounted in Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithparams","title":"fn spec.withParams","text":"<pre><code>withParams(params)\n</code></pre> <p>\"Params that can be passed when requesting credentials/secrets. When Params is set the configured RequestHTTPMethod will be ignored. See RequestHTTPMethod for more details. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'params' should/can be set to.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithparamsmixin","title":"fn spec.withParamsMixin","text":"<pre><code>withParamsMixin(params)\n</code></pre> <p>\"Params that can be passed when requesting credentials/secrets. When Params is set the configured RequestHTTPMethod will be ignored. See RequestHTTPMethod for more details. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'params' should/can be set to.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithpath","title":"fn spec.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path in Vault to get the credentials for, and is relative to Mount. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what 'path' should be set to.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrenewalpercent","title":"fn spec.withRenewalPercent","text":"<pre><code>withRenewalPercent(renewalPercent)\n</code></pre> <p>\"RenewalPercent is the percent out of 100 of the lease duration when the lease is renewed. Defaults to 67 percent plus jitter.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrequesthttpmethod","title":"fn spec.withRequestHTTPMethod","text":"<pre><code>withRequestHTTPMethod(requestHTTPMethod)\n</code></pre> <p>\"RequestHTTPMethod to use when syncing Secrets from Vault. Setting a value here is not typically required. If left unset the Operator will make requests using the GET method. In the case where Params are specified the Operator will use the PUT method. Please consult https://developer.hashicorp.com/vault/docs/secrets if you are uncertain about what method to use. Of note, the Vault client treats PUT and POST as being equivalent. The underlying Vault client implementation will always use the PUT method.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrevoke","title":"fn spec.withRevoke","text":"<pre><code>withRevoke(revoke)\n</code></pre> <p>\"Revoke the existing lease on VDS resource deletion.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.3.0/secrets/v1beta1/vaultDynamicSecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/","title":"secrets.v1beta1.vaultPKISecret","text":"<p>\"VaultPKISecret is the Schema for the vaultpkisecrets API\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withAltNames(altNames)</code></li> <li><code>fn withAltNamesMixin(altNames)</code></li> <li><code>fn withClear(clear)</code></li> <li><code>fn withCommonName(commonName)</code></li> <li><code>fn withExcludeCNFromSans(excludeCNFromSans)</code></li> <li><code>fn withExpiryOffset(expiryOffset)</code></li> <li><code>fn withFormat(format)</code></li> <li><code>fn withIpSans(ipSans)</code></li> <li><code>fn withIpSansMixin(ipSans)</code></li> <li><code>fn withIssuerRef(issuerRef)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withNotAfter(notAfter)</code></li> <li><code>fn withOtherSans(otherSans)</code></li> <li><code>fn withOtherSansMixin(otherSans)</code></li> <li><code>fn withPrivateKeyFormat(privateKeyFormat)</code></li> <li><code>fn withRevoke(revoke)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withTtl(ttl)</code></li> <li><code>fn withUriSans(uriSans)</code></li> <li><code>fn withUriSansMixin(uriSans)</code></li> <li><code>fn withUserIDs(userIDs)</code></li> <li><code>fn withUserIDsMixin(userIDs)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fields","title":"Fields","text":""},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultPKISecret</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#obj-spec","title":"obj spec","text":"<p>\"VaultPKISecretSpec defines the desired state of VaultPKISecret\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithaltnames","title":"fn spec.withAltNames","text":"<pre><code>withAltNames(altNames)\n</code></pre> <p>\"AltNames to include in the request May contain both DNS names and email addresses.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithaltnamesmixin","title":"fn spec.withAltNamesMixin","text":"<pre><code>withAltNamesMixin(altNames)\n</code></pre> <p>\"AltNames to include in the request May contain both DNS names and email addresses.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithclear","title":"fn spec.withClear","text":"<pre><code>withClear(clear)\n</code></pre> <p>\"Clear the Kubernetes secret when the resource is deleted.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithcommonname","title":"fn spec.withCommonName","text":"<pre><code>withCommonName(commonName)\n</code></pre> <p>\"CommonName to include in the request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithexcludecnfromsans","title":"fn spec.withExcludeCNFromSans","text":"<pre><code>withExcludeCNFromSans(excludeCNFromSans)\n</code></pre> <p>\"ExcludeCNFromSans from DNS or Email Subject Alternate Names. Default: false\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithexpiryoffset","title":"fn spec.withExpiryOffset","text":"<pre><code>withExpiryOffset(expiryOffset)\n</code></pre> <p>\"ExpiryOffset to use for computing when the certificate should be renewed. The rotation time will be difference between the expiration and the offset. Should be in duration notation e.g. 30s, 120s, etc.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithformat","title":"fn spec.withFormat","text":"<pre><code>withFormat(format)\n</code></pre> <p>\"Format for the certificate. Choices: \\\"pem\\\", \\\"der\\\", \\\"pem_bundle\\\". If \\\"pem_bundle\\\", any private key and issuing cert will be appended to the certificate pem. If \\\"der\\\", the value will be base64 encoded. Default: pem\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithipsans","title":"fn spec.withIpSans","text":"<pre><code>withIpSans(ipSans)\n</code></pre> <p>\"IPSans to include in the request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithipsansmixin","title":"fn spec.withIpSansMixin","text":"<pre><code>withIpSansMixin(ipSans)\n</code></pre> <p>\"IPSans to include in the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithissuerref","title":"fn spec.withIssuerRef","text":"<pre><code>withIssuerRef(issuerRef)\n</code></pre> <p>\"IssuerRef reference to an existing PKI issuer, either by Vault-generated identifier, the literal string default to refer to the currently configured default issuer, or the name assigned to an issuer. This parameter is part of the request URL.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount for the secret in Vault\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to get the secret from in Vault\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithnotafter","title":"fn spec.withNotAfter","text":"<pre><code>withNotAfter(notAfter)\n</code></pre> <p>\"NotAfter field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithothersans","title":"fn spec.withOtherSans","text":"<pre><code>withOtherSans(otherSans)\n</code></pre> <p>\"Requested other SANs, in an array with the format oid;type:value for each entry.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithothersansmixin","title":"fn spec.withOtherSansMixin","text":"<pre><code>withOtherSansMixin(otherSans)\n</code></pre> <p>\"Requested other SANs, in an array with the format oid;type:value for each entry.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithprivatekeyformat","title":"fn spec.withPrivateKeyFormat","text":"<pre><code>withPrivateKeyFormat(privateKeyFormat)\n</code></pre> <p>\"PrivateKeyFormat, generally the default will be controlled by the Format parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \\\"pkcs8\\\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Default: der\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrevoke","title":"fn spec.withRevoke","text":"<pre><code>withRevoke(revoke)\n</code></pre> <p>\"Revoke the certificate when the resource is deleted.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrole","title":"fn spec.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role in Vault to use when issuing TLS certificates.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithttl","title":"fn spec.withTtl","text":"<pre><code>withTtl(ttl)\n</code></pre> <p>\"TTL for the certificate; sets the expiration date. If not specified the Vault role's default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount's max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA. Should be in duration notation e.g. 120s, 2h, etc.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithurisans","title":"fn spec.withUriSans","text":"<pre><code>withUriSans(uriSans)\n</code></pre> <p>\"The requested URI SANs.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithurisansmixin","title":"fn spec.withUriSansMixin","text":"<pre><code>withUriSansMixin(uriSans)\n</code></pre> <p>\"The requested URI SANs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithuserids","title":"fn spec.withUserIDs","text":"<pre><code>withUserIDs(userIDs)\n</code></pre> <p>\"User ID (OID 0.9.2342.19200300.100.1.1) Subject values to be placed on the signed certificate.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithuseridsmixin","title":"fn spec.withUserIDsMixin","text":"<pre><code>withUserIDsMixin(userIDs)\n</code></pre> <p>\"User ID (OID 0.9.2342.19200300.100.1.1) Subject values to be placed on the signed certificate.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes. If the type is set to \\\"kubernetes.io/tls\\\", \\\"tls.key\\\" will be set to the \\\"private_key\\\" response from Vault, and \\\"tls.crt\\\" will be set to \\\"certificate\\\" + \\\"ca_chain\\\" from the Vault response (\\\"issuing_ca\\\" is used when \\\"ca_chain\\\" is empty). The \\\"remove_roots_from_chain=true\\\" option is used with Vault to exclude the root CA from the Vault response.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.3.0/secrets/v1beta1/vaultPKISecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/","title":"secrets.v1beta1.vaultStaticSecret","text":"<p>\"VaultStaticSecret is the Schema for the vaultstaticsecrets API\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec</code></li> <li><code>fn withHmacSecretData(hmacSecretData)</code></li> <li><code>fn withMount(mount)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withRefreshAfter(refreshAfter)</code></li> <li><code>fn withRolloutRestartTargets(rolloutRestartTargets)</code></li> <li><code>fn withRolloutRestartTargetsMixin(rolloutRestartTargets)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withVaultAuthRef(vaultAuthRef)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.destination</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withCreate(create)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOverwrite(overwrite)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.destination.transformation</code></li> <li><code>fn withExcludeRaw(excludeRaw)</code></li> <li><code>fn withExcludes(excludes)</code></li> <li><code>fn withExcludesMixin(excludes)</code></li> <li><code>fn withIncludes(includes)</code></li> <li><code>fn withIncludesMixin(includes)</code></li> <li><code>fn withTemplates(templates)</code></li> <li><code>fn withTemplatesMixin(templates)</code></li> <li><code>fn withTransformationRefs(transformationRefs)</code></li> <li><code>fn withTransformationRefsMixin(transformationRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs</code><ul> <li><code>fn withIgnoreExcludes(ignoreExcludes)</code></li> <li><code>fn withIgnoreIncludes(ignoreIncludes)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withTemplateRefs(templateRefs)</code></li> <li><code>fn withTemplateRefsMixin(templateRefs)</code></li> <li><code>obj spec.destination.transformation.transformationRefs.templateRefs</code></li> <li><code>fn withKeyOverride(keyOverride)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rolloutRestartTargets</code><ul> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fields","title":"Fields","text":""},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of VaultStaticSecret</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#obj-spec","title":"obj spec","text":"<p>\"VaultStaticSecretSpec defines the desired state of VaultStaticSecret\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithhmacsecretdata","title":"fn spec.withHmacSecretData","text":"<pre><code>withHmacSecretData(hmacSecretData)\n</code></pre> <p>\"HMACSecretData determines whether the Operator computes the HMAC of the Secret's data. The MAC value will be stored in the resource's Status.SecretMac field, and will be used for drift detection and during incoming Vault secret comparison. Enabling this feature is recommended to ensure that Secret's data stays consistent with Vault.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithmount","title":"fn spec.withMount","text":"<pre><code>withMount(mount)\n</code></pre> <p>\"Mount for the secret in Vault\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithnamespace","title":"fn spec.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace to get the secret from in Vault\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithpath","title":"fn spec.withPath","text":"<pre><code>withPath(path)\n</code></pre> <p>\"Path of the secret in Vault, corresponds to the <code>path</code> parameter for, kv-v1: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v1#read-secret kv-v2: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#read-secret-version\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrefreshafter","title":"fn spec.withRefreshAfter","text":"<pre><code>withRefreshAfter(refreshAfter)\n</code></pre> <p>\"RefreshAfter a period of time, in duration notation e.g. 30s, 1m, 24h\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrolloutrestarttargets","title":"fn spec.withRolloutRestartTargets","text":"<pre><code>withRolloutRestartTargets(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithrolloutrestarttargetsmixin","title":"fn spec.withRolloutRestartTargetsMixin","text":"<pre><code>withRolloutRestartTargetsMixin(rolloutRestartTargets)\n</code></pre> <p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithtype","title":"fn spec.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of the Vault static secret\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithvaultauthref","title":"fn spec.withVaultAuthRef","text":"<pre><code>withVaultAuthRef(vaultAuthRef)\n</code></pre> <p>\"VaultAuthRef to the VaultAuth resource, can be prefixed with a namespace, eg: <code>namespaceA/vaultAuthRefB</code>. If no namespace prefix is provided it will default to namespace of the VaultAuth CR. If no value is specified for VaultAuthRef the Operator will default to the <code>default</code> VaultAuth, configured in the operator's namespace.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specwithversion","title":"fn spec.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version of the secret to fetch. Only valid for type kv-v2. Corresponds to version query parameter: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2#version\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestination","title":"obj spec.destination","text":"<p>\"Destination provides configuration necessary for syncing the Vault secret to Kubernetes.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithannotations","title":"fn spec.destination.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithannotationsmixin","title":"fn spec.destination.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithcreate","title":"fn spec.destination.withCreate","text":"<pre><code>withCreate(create)\n</code></pre> <p>\"Create the destination Secret. If the Secret already exists this should be set to false.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithlabels","title":"fn spec.destination.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithlabelsmixin","title":"fn spec.destination.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Labels to apply to the Secret. Requires Create to be set to true.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithname","title":"fn spec.destination.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Secret\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithoverwrite","title":"fn spec.destination.withOverwrite","text":"<pre><code>withOverwrite(overwrite)\n</code></pre> <p>\"Overwrite the destination Secret if it exists and Create is true. This is useful when migrating to VSO from a previous secret deployment strategy.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationwithtype","title":"fn spec.destination.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Kubernetes Secret. Requires Create to be set to true. Defaults to Opaque.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformation","title":"obj spec.destination.transformation","text":"<p>\"Transformation provides configuration for transforming the secret data before it is stored in the Destination.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcluderaw","title":"fn spec.destination.transformation.withExcludeRaw","text":"<pre><code>withExcludeRaw(excludeRaw)\n</code></pre> <p>\"ExcludeRaw data from the destination Secret. Exclusion policy can be set globally by including 'exclude-raw` in the '--global-transformation-options' command line flag. If set, the command line flag always takes precedence over this configuration.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcludes","title":"fn spec.destination.transformation.withExcludes","text":"<pre><code>withExcludes(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithexcludesmixin","title":"fn spec.destination.transformation.withExcludesMixin","text":"<pre><code>withExcludesMixin(excludes)\n</code></pre> <p>\"Excludes contains regex patterns used to filter top-level source secret data fields for exclusion from the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied before any inclusion patterns. To exclude all source secret data fields, you can configure the single pattern \\\".*\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithincludes","title":"fn spec.destination.transformation.withIncludes","text":"<pre><code>withIncludes(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithincludesmixin","title":"fn spec.destination.transformation.withIncludesMixin","text":"<pre><code>withIncludesMixin(includes)\n</code></pre> <p>\"Includes contains regex patterns used to filter top-level source secret data fields for inclusion in the final K8s Secret data. These pattern filters are never applied to templated fields as defined in Templates. They are always applied last.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtemplates","title":"fn spec.destination.transformation.withTemplates","text":"<pre><code>withTemplates(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtemplatesmixin","title":"fn spec.destination.transformation.withTemplatesMixin","text":"<pre><code>withTemplatesMixin(templates)\n</code></pre> <p>\"Templates maps a template name to its Template. Templates are always included in the rendered K8s Secret, and take precedence over templates defined in a SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtransformationrefs","title":"fn spec.destination.transformation.withTransformationRefs","text":"<pre><code>withTransformationRefs(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationwithtransformationrefsmixin","title":"fn spec.destination.transformation.withTransformationRefsMixin","text":"<pre><code>withTransformationRefsMixin(transformationRefs)\n</code></pre> <p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformationtransformationrefs","title":"obj spec.destination.transformation.transformationRefs","text":"<p>\"TransformationRefs contain references to template configuration from SecretTransformation.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithignoreexcludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreExcludes","text":"<pre><code>withIgnoreExcludes(ignoreExcludes)\n</code></pre> <p>\"IgnoreExcludes controls whether to use the SecretTransformation's Excludes data key filters.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithignoreincludes","title":"fn spec.destination.transformation.transformationRefs.withIgnoreIncludes","text":"<pre><code>withIgnoreIncludes(ignoreIncludes)\n</code></pre> <p>\"IgnoreIncludes controls whether to use the SecretTransformation's Includes data key filters.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithname","title":"fn spec.destination.transformation.transformationRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the SecretTransformation resource.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithnamespace","title":"fn spec.destination.transformation.transformationRefs.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the SecretTransformation resource.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefs","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefs","text":"<pre><code>withTemplateRefs(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefswithtemplaterefsmixin","title":"fn spec.destination.transformation.transformationRefs.withTemplateRefsMixin","text":"<pre><code>withTemplateRefsMixin(templateRefs)\n</code></pre> <p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#obj-specdestinationtransformationtransformationrefstemplaterefs","title":"obj spec.destination.transformation.transformationRefs.templateRefs","text":"<p>\"TemplateRefs map to a Template found in this TransformationRef. If empty, then all templates from the SecretTransformation will be rendered to the K8s Secret.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithkeyoverride","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withKeyOverride","text":"<pre><code>withKeyOverride(keyOverride)\n</code></pre> <p>\"KeyOverride to the rendered template in the Destination secret. If Key is empty, then the Key from reference spec will be used. Set this to override the Key set from the reference spec.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specdestinationtransformationtransformationrefstemplaterefswithname","title":"fn spec.destination.transformation.transformationRefs.templateRefs.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the Template in SecretTransformationSpec.Templates. the rendered secret data.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#obj-specrolloutrestarttargets","title":"obj spec.rolloutRestartTargets","text":"<p>\"RolloutRestartTargets should be configured whenever the application(s) consuming the Vault secret does not support dynamically reloading a rotated secret. In that case one, or more RolloutRestartTarget(s) can be configured here. The Operator will trigger a \\\"rollout-restart\\\" for each target whenever the Vault secret changes between reconciliation events. All configured targets wil be ignored if HMACSecretData is set to false. See RolloutRestartTarget for more details.\"</p>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specrolloutrestarttargetswithkind","title":"fn spec.rolloutRestartTargets.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"0.3.0/secrets/v1beta1/vaultStaticSecret/#fn-specrolloutrestarttargetswithname","title":"fn spec.rolloutRestartTargets.withName","text":"<pre><code>withName(name)\n</code></pre>"}]}